name: CI/CD Pipeline with Comprehensive Security

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev
  schedule:
    - cron: '0 2 * * 0'

permissions:
  contents: write
  security-events: write
  actions: read

jobs:
  gitleaks:
    name: Secret Detection
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        run: |
          docker run --rm -v ${{ github.workspace }}:/repo \
            zricethezav/gitleaks:latest \
            detect --source /repo --no-git --verbose --report-format json --report-path /repo/gitleaks-report.json

      - name: Upload Gitleaks report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-report.json

  php_security:
    name: PHP Security Analysis
    runs-on: ubuntu-latest
    needs: gitleaks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          tools: composer:v2, psalm, phpstan

      - name: Install Dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Run PHPStan (Static Analysis)
        run: |
          if [ ! -f phpstan.neon ]; then
            echo "parameters:
              level: 6
              paths:
                - app
                - config
                - database
                - routes
              excludePaths:
                - vendor
                - storage
                - bootstrap/cache" > phpstan.neon
          fi
          vendor/bin/phpstan analyse --error-format=json --no-progress > phpstan-report.json || true

      - name: Upload PHPStan Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: phpstan-report
          path: phpstan-report.json

  codeql_javascript:
    name: CodeQL JavaScript Analysis
    runs-on: ubuntu-latest
    needs: gitleaks
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          config-file: ./.github/codeql/codeql-config.yml
          queries: ${{ github.ref_name == 'main' && 'security-extended' || 'security-and-quality' }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Node dependencies
        run: npm ci

      - name: Build JavaScript assets
        run: npm run build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"
          upload: true
          output: codeql-results-javascript.sarif

      - name: Upload CodeQL SARIF file
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: codeql-results-javascript
          path: codeql-results-javascript.sarif

  dependency_check:
    name: Dependency Vulnerability Check
    runs-on: ubuntu-latest
    needs: gitleaks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          tools: composer:v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Dependencies
        run: |
          composer install --no-interaction --prefer-dist --optimize-autoloader
          npm ci

      - name: PHP Security Check (Composer Audit)
        run: |
          composer audit --format=json > composer-audit.json || true

      - name: Node.js Security Check (npm audit)
        run: |
          npm audit --audit-level=moderate --json > npm-audit.json || true

      - name: Upload Dependency Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-reports
          path: |
            composer-audit.json
            npm-audit.json

  linting:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    needs: [php_security, codeql_javascript, dependency_check]

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'

      - name: Install Dependencies
        run: |
          composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
          npm install

      - name: Run Pint
        run: vendor/bin/pint

      - name: Format Frontend
        run: npm run format

      - name: Lint Frontend
        run: npm run lint

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: linting

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          tools: composer:v2
          coverage: xdebug

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Node Dependencies
        run: npm ci

      - name: Build Assets
        run: npm run build

      - name: Install Dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Copy Environment File
        run: cp .env.example .env

      - name: Generate Application Key
        run: php artisan key:generate

      - name: Tests
        run: ./vendor/bin/pest --coverage --coverage-clover=coverage.xml

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
  
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Coverage Report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: .

      - name: Download CodeQL SARIF files
        uses: actions/download-artifact@v4
        with:
          name: codeql-results-javascript
          path: ./codeql-results/

      - name: Verify Coverage File
        run: |
          if [ ! -f coverage.xml ]; then
            echo "coverage.xml not found, skipping coverage analysis"
            echo "sonar.php.coverage.reportPaths=none" > sonar-project.properties.override
          else
            echo "coverage.xml found, proceeding with analysis"
          fi

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ vars.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ vars.SONAR_ORGANIZATION }}
            -Dsonar.sarifReportPaths=./codeql-results/
            $(if [ -f sonar-project.properties.override ]; then cat sonar-project.properties.override; fi)

  build_docker_image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: sonarqube
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          cat << EOF > .env
          APP_NAME=${{ vars.APP_NAME }}
          APP_ENV=${{ vars.APP_ENV }}
          APP_KEY=${{ secrets.APP_KEY }}
          APP_DEBUG=${{ vars.APP_DEBUG }}
          APP_URL=${{ vars.APP_URL }}
          
          APP_LOCALE=${{ vars.APP_LOCALE }}
          APP_FALLBACK_LOCALE=${{ vars.APP_FALLBACK_LOCALE }}
          APP_FAKER_LOCALE=${{ vars.APP_FAKER_LOCALE }}
          
          APP_MAINTENANCE_DRIVER=${{ vars.APP_MAINTENANCE_DRIVER }}
          PHP_CLI_SERVER_WORKERS=${{ vars.PHP_CLI_SERVER_WORKERS }}
          BCRYPT_ROUNDS=${{ vars.BCRYPT_ROUNDS }}
          
          LOG_CHANNEL=${{ vars.LOG_CHANNEL }}
          LOG_STACK=${{ vars.LOG_STACK }}
          LOG_DEPRECATIONS_CHANNEL=${{ vars.LOG_DEPRECATIONS_CHANNEL }}
          LOG_LEVEL=${{ vars.LOG_LEVEL }}
          
          DB_CONNECTION=${{ vars.DB_CONNECTION }}
          DB_HOST=${{ vars.DB_HOST }}
          DB_PORT=${{ vars.DB_PORT }}
          DB_DATABASE=${{ vars.DB_DATABASE }}
          DB_USERNAME=${{ vars.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          
          SESSION_DRIVER=${{ vars.SESSION_DRIVER }}
          SESSION_LIFETIME=${{ vars.SESSION_LIFETIME }}
          SESSION_ENCRYPT=${{ vars.SESSION_ENCRYPT }}
          SESSION_PATH=${{ vars.SESSION_PATH }}
          SESSION_DOMAIN=${{ vars.SESSION_DOMAIN }}
          
          BROADCAST_CONNECTION=${{ vars.BROADCAST_CONNECTION }}
          FILESYSTEM_DISK=${{ vars.FILESYSTEM_DISK }}
          QUEUE_CONNECTION=${{ vars.QUEUE_CONNECTION }}
          
          CACHE_STORE=${{ vars.CACHE_STORE }}
          MEMCACHED_HOST=${{ vars.MEMCACHED_HOST }}
          
          REDIS_CLIENT=${{ vars.REDIS_CLIENT }}
          REDIS_HOST=${{ vars.REDIS_HOST }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD || 'null' }}
          REDIS_PORT=${{ vars.REDIS_PORT }}
          
          MAIL_MAILER=${{ vars.MAIL_MAILER }}
          MAIL_SCHEME=${{ vars.MAIL_SCHEME }}
          MAIL_HOST=${{ vars.MAIL_HOST }}
          MAIL_PORT=${{ vars.MAIL_PORT }}
          MAIL_USERNAME=${{ secrets.MAIL_USERNAME || '' }}
          MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD || '' }}
          MAIL_FROM_ADDRESS=${{ vars.MAIL_FROM_ADDRESS }}
          MAIL_FROM_NAME=${{ vars.MAIL_FROM_NAME }}
          
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID || '' }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY || '' }}
          AWS_DEFAULT_REGION=${{ vars.AWS_DEFAULT_REGION }}
          AWS_BUCKET=${{ vars.AWS_BUCKET }}
          AWS_USE_PATH_STYLE_ENDPOINT=${{ vars.AWS_USE_PATH_STYLE_ENDPOINT }}
          
          VITE_APP_NAME=${{ vars.APP_NAME }}
          
          REVERB_APP_ID=${{ vars.REVERB_APP_ID }}
          REVERB_APP_KEY=${{ secrets.REVERB_APP_KEY }}
          REVERB_APP_SECRET=${{ secrets.REVERB_APP_SECRET }}
          REVERB_HOST=${{ vars.REVERB_HOST }}
          REVERB_PORT=${{ vars.REVERB_PORT }}
          REVERB_SCHEME=${{ vars.REVERB_SCHEME }}
          
          VITE_REVERB_APP_KEY=${{ secrets.REVERB_APP_KEY }}
          VITE_REVERB_HOST=${{ vars.REVERB_HOST }}
          VITE_REVERB_PORT=${{ vars.REVERB_PORT }}
          VITE_REVERB_SCHEME=${{ vars.REVERB_SCHEME }}
          EOF

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          driver-opts: network=host

      - name: Build Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          load: true
          tags: ${{ secrets.AZURE_ACR_REGISTRY }}/app:${{ github.ref_name == 'main' && 'latest' || github.ref_name }}
          build-args: |
            GITHUB_TOKEN=${{ secrets.COMPOSER_GITHUB_TOKEN }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Save Docker Image
        run: |
          docker save -o docker-image.tar ${{ secrets.AZURE_ACR_REGISTRY }}/app:${{ github.ref_name == 'main' && 'latest' || github.ref_name }}

      - name: Upload Docker Image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: docker-image.tar

  docker_scout_scan:
    name: Docker Scout Security Scan
    runs-on: ubuntu-latest
    needs: build_docker_image
    if: github.event_name == 'push'
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker Image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .

      - name: Load Docker Image
        run: |
          docker load -i docker-image.tar
          echo "IMAGE_TAG=${{ github.ref_name == 'main' && 'latest' || github.ref_name }}" >> $GITHUB_ENV
          echo "IMAGE_NAME=${{ secrets.AZURE_ACR_REGISTRY }}/app:${{ github.ref_name == 'main' && 'latest' || github.ref_name }}" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Verify Image and Environment
        run: |
          echo "🔍 Environment Check:"
          echo "IMAGE_NAME: ${{ env.IMAGE_NAME }}"
          echo "IMAGE_TAG: ${{ env.IMAGE_TAG }}"
          echo "Branch: ${{ github.ref_name }}"
          echo ""
          echo "📦 Available Docker Images:"
          docker images
          echo ""
          echo "🎯 Target Image Details:"
          if docker inspect ${{ env.IMAGE_NAME }} > /dev/null 2>&1; then
            echo "✅ Target image found"
            docker inspect ${{ env.IMAGE_NAME }} --format='{{.Id}} {{.RepoTags}}'
          else
            echo "❌ Target image not found"
            exit 1
          fi

      - name: Docker Scout - CVE Analysis
        id: scout_cves
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ env.IMAGE_NAME }}
          sarif-file: scout-cves.sarif
          summary: true
          format: sarif
          only-severities: critical,high,medium
          exit-code: false

      # - name: Docker Scout - Policy Evaluation
      #   id: scout_policy
      #   uses: docker/scout-action@v1
      #   with:
      #     command: policy
      #     image: ${{ env.IMAGE_NAME }}
      #     organization: ${{ secrets.DOCKERHUB_USERNAME }}
      #     exit-code: false
      #   continue-on-error: true

      - name: Docker Scout - SBOM Generation
        uses: docker/scout-action@v1
        with:
          command: sbom
          image: ${{ env.IMAGE_NAME }}
          format: spdx
          output: scout-sbom.spdx.json
        continue-on-error: true

      - name: Docker Scout - Recommendations
        uses: docker/scout-action@v1
        with:
          command: recommendations
          image: ${{ env.IMAGE_NAME }}
          format: sarif
          output: scout-recommendations.sarif
        continue-on-error: true

      - name: Verify Scout Output Files
        run: |
          echo "📋 Checking generated files:"
          ls -la scout-*.* 2>/dev/null || echo "No scout files found yet"
          
          if [ -f scout-cves.sarif ]; then
            echo "✅ CVE SARIF file exists ($(wc -c < scout-cves.sarif) bytes)"
            # Validate JSON structure
            if jq empty scout-cves.sarif 2>/dev/null; then
              echo "✅ SARIF file has valid JSON structure"
            else
              echo "⚠️ SARIF file has invalid JSON, creating minimal valid structure"
              echo '{"version": "2.1.0", "runs": [{"tool": {"driver": {"name": "Docker Scout"}}, "results": []}]}' > scout-cves.sarif
            fi
          else
            echo "⚠️ CVE SARIF file not found, creating empty one"
            echo '{"version": "2.1.0", "runs": [{"tool": {"driver": {"name": "Docker Scout"}}, "results": []}]}' > scout-cves.sarif
          fi

      - name: Parse Scout Results and Generate Security Report
        id: parse_results
        run: |
          # Initialize counters
          CRITICAL_COUNT=0
          HIGH_COUNT=0
          MEDIUM_COUNT=0
          
          if [ -f scout-cves.sarif ] && [ -s scout-cves.sarif ]; then
            echo "📊 Parsing SARIF results..."
            
            # Parse with better error handling
            CRITICAL_COUNT=$(jq '[.runs[]?.results[]? | select(.level == "error" and ((.properties.severity // .properties."security-severity" // .ruleIndex // 0) | tonumber) >= 9.0)] | length' scout-cves.sarif 2>/dev/null || echo "0")
            HIGH_COUNT=$(jq '[.runs[]?.results[]? | select(.level == "error" and ((.properties.severity // .properties."security-severity" // .ruleIndex // 0) | tonumber) >= 7.0 and ((.properties.severity // .properties."security-severity" // .ruleIndex // 0) | tonumber) < 9.0)] | length' scout-cves.sarif 2>/dev/null || echo "0")
            MEDIUM_COUNT=$(jq '[.runs[]?.results[]? | select(.level == "warning" and ((.properties.severity // .properties."security-severity" // .ruleIndex // 0) | tonumber) >= 4.0 and ((.properties.severity // .properties."security-severity" // .ruleIndex // 0) | tonumber) < 7.0)] | length' scout-cves.sarif 2>/dev/null || echo "0")
            
            # Fallback parsing if properties are structured differently
            if [ "$CRITICAL_COUNT" = "0" ] && [ "$HIGH_COUNT" = "0" ] && [ "$MEDIUM_COUNT" = "0" ]; then
              echo "🔄 Trying alternative parsing method..."
              TOTAL_RESULTS=$(jq '[.runs[]?.results[]?] | length' scout-cves.sarif 2>/dev/null || echo "0")
              if [ "$TOTAL_RESULTS" -gt 0 ]; then
                echo "Found $TOTAL_RESULTS total results, using simplified counting"
                # If we can't parse severity properly, assume some findings exist
                MEDIUM_COUNT=$TOTAL_RESULTS
              fi
            fi
          fi
          
          # Ensure counts are numeric
          CRITICAL_COUNT=${CRITICAL_COUNT:-0}
          HIGH_COUNT=${HIGH_COUNT:-0}
          MEDIUM_COUNT=${MEDIUM_COUNT:-0}
          
          echo "🛡️ Security Scan Results:"
          echo "Critical: $CRITICAL_COUNT"
          echo "High: $HIGH_COUNT"  
          echo "Medium: $MEDIUM_COUNT"
          
          # Set outputs
          echo "CRITICAL_VULNS=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
          echo "HIGH_VULNS=$HIGH_COUNT" >> $GITHUB_OUTPUT
          echo "MEDIUM_VULNS=$MEDIUM_COUNT" >> $GITHUB_OUTPUT
          
          # Generate job summary
          echo "## 🛡️ Docker Scout Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Severity Level | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|---------------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔴 Critical | $CRITICAL_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "| 🟠 High | $HIGH_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "| 🟡 Medium | $MEDIUM_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Security gate logic
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "SECURITY_GATE=BLOCK_CRITICAL" >> $GITHUB_OUTPUT
            echo "## ❌ Security Gate: BLOCKED" >> $GITHUB_STEP_SUMMARY
            echo "**Reason:** Critical vulnerabilities detected ($CRITICAL_COUNT found)" >> $GITHUB_STEP_SUMMARY
            echo "**Action:** Deployment blocked for security" >> $GITHUB_STEP_SUMMARY
          elif [ "$HIGH_COUNT" -gt 5 ]; then
            echo "SECURITY_GATE=BLOCK_HIGH" >> $GITHUB_OUTPUT
            echo "## ⚠️ Security Gate: BLOCKED" >> $GITHUB_STEP_SUMMARY
            echo "**Reason:** Too many high-severity vulnerabilities ($HIGH_COUNT > 5)" >> $GITHUB_STEP_SUMMARY
            echo "**Action:** Deployment blocked - please remediate high-severity issues" >> $GITHUB_STEP_SUMMARY
          else
            echo "SECURITY_GATE=PASS" >> $GITHUB_OUTPUT
            echo "## ✅ Security Gate: PASSED" >> $GITHUB_STEP_SUMMARY
            echo "**Status:** Safe to deploy" >> $GITHUB_STEP_SUMMARY
            echo "**Action:** Proceeding with deployment" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Security Gate Enforcement
        if: steps.parse_results.outputs.SECURITY_GATE != 'PASS'
        run: |
          echo ""
          echo "🚨 SECURITY GATE FAILED 🚨"
          echo "=========================="
          echo "Critical vulnerabilities: ${{ steps.parse_results.outputs.CRITICAL_VULNS }}"
          echo "High vulnerabilities: ${{ steps.parse_results.outputs.HIGH_VULNS }}"
          echo "Medium vulnerabilities: ${{ steps.parse_results.outputs.MEDIUM_VULNS }}"
          echo ""
          
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "🛑 PRODUCTION DEPLOYMENT BLOCKED"
            echo "This is the main branch - strict security enforcement is active."
            echo "Please address security vulnerabilities before proceeding."
            echo "::error::Production deployment blocked due to security vulnerabilities"
            exit 1
          else
            echo "⚠️ DEVELOPMENT BRANCH WARNING"
            echo "Security issues detected, but allowing deployment on non-production branch."
            echo "Please address these issues before merging to main."
            echo "::warning::Security vulnerabilities detected - recommended to fix before production"
          fi

      - name: Upload SARIF to GitHub Security Tab
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: scout-cves.sarif
          category: docker-scout-cves
        continue-on-error: true

      - name: Upload Additional SARIF Files
        if: always() && hashFiles('scout-recommendations.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: scout-recommendations.sarif
          category: docker-scout-recommendations
        continue-on-error: true

      - name: Create Comprehensive Security Report
        if: always()
        run: |
          mkdir -p security-reports
          
          # Create detailed report
          cat << EOF > security-reports/docker-security-summary.md
          # Docker Security Scan Report
          
          **Generated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          **Image:** \`${{ env.IMAGE_NAME }}\`
          **Branch:** \`${{ github.ref_name }}\`
          **Commit:** \`${{ github.sha }}\`
          **Security Gate:** ${{ steps.parse_results.outputs.SECURITY_GATE }}
          
          ## Vulnerability Summary
          
          | Severity | Count |
          |----------|-------|
          | Critical | ${{ steps.parse_results.outputs.CRITICAL_VULNS }} |
          | High     | ${{ steps.parse_results.outputs.HIGH_VULNS }} |
          | Medium   | ${{ steps.parse_results.outputs.MEDIUM_VULNS }} |
          
          ## Security Assessment
          
          $(if [ "${{ steps.parse_results.outputs.SECURITY_GATE }}" = "PASS" ]; then
            echo "✅ **PASSED** - Image meets security requirements"
          else
            echo "❌ **FAILED** - Security issues require attention"
          fi)
          
          ## Files Generated
          
          - \`scout-cves.sarif\` - Vulnerability details in SARIF format
          - \`scout-sbom.spdx.json\` - Software Bill of Materials
          - \`scout-recommendations.sarif\` - Base image recommendations
          
          ## Next Steps
          
          1. Review detailed vulnerabilities in GitHub Security tab
          2. Check base image recommendations for updates
          3. Update dependencies if vulnerabilities found
          4. Re-run scan after fixes
          
          EOF
          
          # Copy all scout files to reports directory
          cp scout-*.* security-reports/ 2>/dev/null || echo "Some scout files not found, continuing..."
          
          echo "📋 Security report created:"
          ls -la security-reports/

      - name: Upload Comprehensive Security Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docker-security-reports-${{ github.run_number }}
          path: security-reports/
          retention-days: 30

      - name: Security Scan Summary
        if: always()
        run: |
          echo ""
          echo "🎯 DOCKER SCOUT SCAN COMPLETE"
          echo "=============================="
          echo "✅ Image scanned: ${{ env.IMAGE_NAME }}"
          echo "📊 Critical: ${{ steps.parse_results.outputs.CRITICAL_VULNS }}"
          echo "📊 High: ${{ steps.parse_results.outputs.HIGH_VULNS }}"  
          echo "📊 Medium: ${{ steps.parse_results.outputs.MEDIUM_VULNS }}"
          echo "🚦 Security Gate: ${{ steps.parse_results.outputs.SECURITY_GATE }}"
          echo "📁 Reports uploaded as artifacts"
          echo "🔒 SARIF files uploaded to GitHub Security tab"
          echo ""

  push_docker_image:
    name: Push Docker Image to ACR
    runs-on: ubuntu-latest
    needs: docker_scout_scan
    if: github.event_name == 'push'

    steps:
      - name: Download Docker Image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .

      - name: Load Docker Image
        run: |
          docker load -i docker-image.tar

      - name: Login to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.AZURE_ACR_REGISTRY }}
          username: ${{ secrets.AZURE_ACR_USERNAME }}
          password: ${{ secrets.AZURE_ACR_PASSWORD }}

      - name: Push Docker Image
        run: |
          docker push ${{ secrets.AZURE_ACR_REGISTRY }}/app:${{ github.ref_name == 'main' && 'latest' || github.ref_name }}