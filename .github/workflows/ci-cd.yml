name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

permissions:
  contents: write

jobs:
  gitleaks:
    name: Secret Detection
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        run: |
          docker run --rm -v ${{ github.workspace }}:/repo \
            zricethezav/gitleaks:latest \
            detect --source /repo --no-git --verbose --report-format json --report-path /repo/gitleaks-report.json

      - name: Upload Gitleaks report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-report.json

  linting:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    needs: gitleaks

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'

      - name: Install Dependencies
        run: |
          composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
          npm install

      - name: Run Pint
        run: vendor/bin/pint

      - name: Format Frontend
        run: npm run format

      - name: Lint Frontend
        run: npm run lint

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: linting

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          tools: composer:v2
          coverage: xdebug

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Node Dependencies
        run: npm ci

      - name: Build Assets
        run: npm run build

      - name: Install Dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Copy Environment File
        run: cp .env.example .env

      - name: Generate Application Key
        run: php artisan key:generate

      - name: Tests
        run: ./vendor/bin/pest --coverage --coverage-clover=coverage.xml

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
  
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Coverage Report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: .

      - name: Verify Coverage File
        run: |
          if [ ! -f coverage.xml ]; then
            echo "coverage.xml not found, skipping coverage analysis"
            echo "sonar.php.coverage.reportPaths=none" > sonar-project.properties.override
          else
            echo "coverage.xml found, proceeding with analysis"
          fi

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ vars.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ vars.SONAR_ORGANIZATION }}
            $(if [ -f sonar-project.properties.override ]; then cat sonar-project.properties.override; fi)

  build_docker_image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: sonarqube
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          cat << EOF > .env
          APP_NAME=${{ vars.APP_NAME }}
          APP_ENV=${{ vars.APP_ENV }}
          APP_KEY=${{ secrets.APP_KEY }}
          APP_DEBUG=${{ vars.APP_DEBUG }}
          APP_URL=${{ vars.APP_URL }}
          
          APP_LOCALE=${{ vars.APP_LOCALE }}
          APP_FALLBACK_LOCALE=${{ vars.APP_FALLBACK_LOCALE }}
          APP_FAKER_LOCALE=${{ vars.APP_FAKER_LOCALE }}
          
          APP_MAINTENANCE_DRIVER=${{ vars.APP_MAINTENANCE_DRIVER }}
          PHP_CLI_SERVER_WORKERS=${{ vars.PHP_CLI_SERVER_WORKERS }}
          BCRYPT_ROUNDS=${{ vars.BCRYPT_ROUNDS }}
          
          LOG_CHANNEL=${{ vars.LOG_CHANNEL }}
          LOG_STACK=${{ vars.LOG_STACK }}
          LOG_DEPRECATIONS_CHANNEL=${{ vars.LOG_DEPRECATIONS_CHANNEL }}
          LOG_LEVEL=${{ vars.LOG_LEVEL }}
          
          DB_CONNECTION=${{ vars.DB_CONNECTION }}
          DB_HOST=${{ vars.DB_HOST }}
          DB_PORT=${{ vars.DB_PORT }}
          DB_DATABASE=${{ vars.DB_DATABASE }}
          DB_USERNAME=${{ vars.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          
          SESSION_DRIVER=${{ vars.SESSION_DRIVER }}
          SESSION_LIFETIME=${{ vars.SESSION_LIFETIME }}
          SESSION_ENCRYPT=${{ vars.SESSION_ENCRYPT }}
          SESSION_PATH=${{ vars.SESSION_PATH }}
          SESSION_DOMAIN=${{ vars.SESSION_DOMAIN }}
          
          BROADCAST_CONNECTION=${{ vars.BROADCAST_CONNECTION }}
          FILESYSTEM_DISK=${{ vars.FILESYSTEM_DISK }}
          QUEUE_CONNECTION=${{ vars.QUEUE_CONNECTION }}
          
          CACHE_STORE=${{ vars.CACHE_STORE }}
          MEMCACHED_HOST=${{ vars.MEMCACHED_HOST }}
          
          REDIS_CLIENT=${{ vars.REDIS_CLIENT }}
          REDIS_HOST=${{ vars.REDIS_HOST }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD || 'null' }}
          REDIS_PORT=${{ vars.REDIS_PORT }}
          
          MAIL_MAILER=${{ vars.MAIL_MAILER }}
          MAIL_SCHEME=${{ vars.MAIL_SCHEME }}
          MAIL_HOST=${{ vars.MAIL_HOST }}
          MAIL_PORT=${{ vars.MAIL_PORT }}
          MAIL_USERNAME=${{ secrets.MAIL_USERNAME || '' }}
          MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD || '' }}
          MAIL_FROM_ADDRESS=${{ vars.MAIL_FROM_ADDRESS }}
          MAIL_FROM_NAME=${{ vars.MAIL_FROM_NAME }}
          
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID || '' }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY || '' }}
          AWS_DEFAULT_REGION=${{ vars.AWS_DEFAULT_REGION }}
          AWS_BUCKET=${{ vars.AWS_BUCKET }}
          AWS_USE_PATH_STYLE_ENDPOINT=${{ vars.AWS_USE_PATH_STYLE_ENDPOINT }}
          
          VITE_APP_NAME=${{ vars.APP_NAME }}
          
          REVERB_APP_ID=${{ vars.REVERB_APP_ID }}
          REVERB_APP_KEY=${{ secrets.REVERB_APP_KEY }}
          REVERB_APP_SECRET=${{ secrets.REVERB_APP_SECRET }}
          REVERB_HOST=${{ vars.REVERB_HOST }}
          REVERB_PORT=${{ vars.REVERB_PORT }}
          REVERB_SCHEME=${{ vars.REVERB_SCHEME }}
          
          VITE_REVERB_APP_KEY=${{ secrets.REVERB_APP_KEY }}
          VITE_REVERB_HOST=${{ vars.REVERB_HOST }}
          VITE_REVERB_PORT=${{ vars.REVERB_PORT }}
          VITE_REVERB_SCHEME=${{ vars.REVERB_SCHEME }}
          EOF

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          driver-opts: network=host

      - name: Build Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          load: true
          tags: ${{ secrets.AZURE_ACR_REGISTRY }}/app:${{ github.ref_name == 'main' && 'latest' || github.ref_name }}
          build-args: |
            GITHUB_TOKEN=${{ secrets.COMPOSER_GITHUB_TOKEN }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Save Docker Image
        run: |
          docker save -o docker-image.tar ${{ secrets.AZURE_ACR_REGISTRY }}/app:${{ github.ref_name == 'main' && 'latest' || github.ref_name }}

      - name: Upload Docker Image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: docker-image.tar

  push_docker_image:
    name: Push Docker Image to ACR
    runs-on: ubuntu-latest
    needs: build_docker_image
    if: github.event_name == 'push'

    steps:
      - name: Download Docker Image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .

      - name: Load Docker Image
        run: |
          docker load -i docker-image.tar

      - name: Login to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.AZURE_ACR_REGISTRY }}
          username: ${{ secrets.AZURE_ACR_USERNAME }}
          password: ${{ secrets.AZURE_ACR_PASSWORD }}

      - name: Push Docker Image
        run: |
          docker push ${{ secrets.AZURE_ACR_REGISTRY }}/app:${{ github.ref_name == 'main' && 'latest' || github.ref_name }}